// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// User model
model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  phone          String?
  family_name    String?
  given_name     String?
  image          String?
  locale         String   @default("en")
  country        String?
  state          String?
  city           String?
  salary         Float?
  payday         Int?
  twilioToken    String?
  ACCESS_TOKEN   String?
  ITEM_ID        String?
  TRANSFER_ID    String?
  storeAYear     Boolean  @default(true)
  kpis           Json[]
  kpis_prev      Json[]
  isPro          Boolean  @default(false)
  subscription   String?
  createdAt      DateTime @default(now())
  transactions   Transaction[]
  liabilities    Liabilities[]
  items          Item[]
  chats          Chat[]
}

// Transaction model
model Transaction {
  id                      String   @id @default(uuid())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  name                    String?
  amount                  Float
  account_id              String
  date                    DateTime
  iso_currency_code       String?
  unofficial_currency_code String?
  category                String[]
  payment_channel         String?
  category_id             String?
  check_number            String?
  datetime                DateTime?
  authorized_date         DateTime?
  authorized_datetime     DateTime?
  locationId              String? @unique
  location                Location? @relation(fields: [locationId], references: [id])
  merchant_name           String?
  paymentMetaId           String? @unique
  payment_meta            PaymentMeta? @relation(fields: [paymentMetaId], references: [id])
  pending                 Boolean?
  pending_transaction_id  String?
  personalFinanceCategoryId String? @unique
  personal_finance_category PersonalFinanceCategory? @relation(fields: [personalFinanceCategoryId], references: [id])
  transaction_id          String?
  transaction_code        String?
  transaction_type        String?
  cancel_transaction_id   String?
  fees                    Float?
  investment_transaction_id String?
  price                   Float?
  quantity                Float?
  security_id             String?
  subtype                 String?
  type                    String?
}

// Liabilities model
model Liabilities {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  credit   Credit[]
  mortgage Mortgage[]
  student  Student[]
}

// Item model
model Item {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  institutionId String?
  institution Institution? @relation(fields: [institutionId], references: [id])
  accounts    Account[]
  cursor      String?
  ACCESS_TOKEN String?
  ITEM_ID     String?
  TRANSFER_ID String?
  endDate     String?
  products    String[]
}

// Chat model
model Chat {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String?
  messages  Message[]
  path      String?
  createdAt DateTime?
}

// Category model
model Category {
  id        String   @id @default(uuid())
  category_id String
  group      String
  hierarchy  String[]
}

// Location model
model Location {
  id          String   @id @default(uuid())
  address     String?
  city        String?
  region      String?
  postal_code String?
  country     String?
  lat         Float?
  lon         Float?
  store_number String?
  transaction Transaction?
}

// PaymentMeta model
model PaymentMeta {
  id                String   @id @default(uuid())
  by_order_of       String?
  payee             String?
  payer             String?
  payment_method    String?
  payment_processor String?
  ppd_id            String?
  reason            String?
  reference_number  String?
  transaction       Transaction?
}

// PersonalFinanceCategory model
model PersonalFinanceCategory {
  id        String   @id @default(uuid())
  primary   String?
  detailed  String?
  transaction Transaction?
}

// Credit model
model Credit {
  id                      String   @id @default(uuid())
  liabilitiesId           String
  liabilities             Liabilities @relation(fields: [liabilitiesId], references: [id])
  account_id              String
  aprs                    Apr[]
  is_overdue              Boolean?
  last_payment_amount     Float?
  last_payment_date       DateTime?
  last_statement_issue_date DateTime?
  last_statement_balance  Float?
  minimum_payment_amount  Float?
  next_payment_due_date   DateTime?
}

// Mortgage model
model Mortgage {
  id                      String   @id @default(uuid())
  liabilitiesId           String
  liabilities             Liabilities @relation(fields: [liabilitiesId], references: [id])
  account_id              String
  account_number          String?
  current_late_fee        Float?
  escrow_balance          Float?
  has_pmi                 Boolean?
  has_prepayment_penalty  Boolean?
  interest_rateId         String? @unique
  interest_rate           InterestRate? @relation(fields: [interest_rateId], references: [id])
  last_payment_amount     Float?
  last_payment_date       DateTime?
  loan_term               String?
  loan_type_description   String?
  maturity_date           DateTime?
  next_monthly_payment    Float?
  next_payment_due_date   DateTime?
  origination_date        DateTime?
  origination_principal_amount Float?
  past_due_amount         Float?
  property_addressId      String? @unique
  property_address        PropertyAddress? @relation(fields: [property_addressId], references: [id])
  ytd_interest_paid       Float?
  ytd_principal_paid      Float?
}

// Student model
model Student {
  id                      String   @id @default(uuid())
  liabilitiesId           String
  liabilities             Liabilities @relation(fields: [liabilitiesId], references: [id])
  account_id              String
  account_number          String?
  disbursement_dates      DateTime[]
  expected_payoff_date    DateTime?
  guarantor               String?
  interest_rate_percentage Float?
  is_overdue              Boolean?
  last_payment_amount     Float?
  last_payment_date       DateTime?
  last_statement_issue_date DateTime?
  loan_name               String?
  loan_statusId           String? @unique
  loan_status             LoanStatus? @relation(fields: [loan_statusId], references: [id])
  minimum_payment_amount  Float?
  next_payment_due_date   DateTime?
  origination_date        DateTime?
  origination_principal_amount Float?
  outstanding_interest_amount Float?
  payment_reference_number String?
  pslf_statusId           String? @unique
  pslf_status             PSLFStatus? @relation(fields: [pslf_statusId], references: [id])
  repayment_planId        String? @unique
  repayment_plan          RepaymentPlan? @relation(fields: [repayment_planId], references: [id])
  sequence_number         String?
  servicer_addressId      String? @unique
  servicer_address        ServicerAddress? @relation(fields: [servicer_addressId], references: [id])
  ytd_interest_paid       Float?
  ytd_principal_paid      Float?
}

// Institution model
model Institution {
  id              String   @id @default(uuid())
  institution_id  String?
  name            String?
  items           Item[]
}

// Account model
model Account {
  id                      String   @id @default(uuid())
  itemId                  String
  item                    Item     @relation(fields: [itemId], references: [id])
  account_id              String
  balancesId              String? @unique
  balances                Balances? @relation(fields: [balancesId], references: [id])
  mask                    String?
  name                    String?
  official_name           String?
  subtype                 String?
  type                    String?
  persistent_account_id   String?
}

// Message model
model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String
  name      String
  content   String
}

// Apr model
model Apr {
  id                      String   @id @default(uuid())
  creditId                String
  credit                  Credit   @relation(fields: [creditId], references: [id])
  apr_percentage          Float?
  apr_type                String?
  balance_subject_to_apr  Float?
  interest_charge_amount  Float?
}

// InterestRate model
model InterestRate {
  id          String   @id @default(uuid())
  percentage  Float?
  type        String?
  mortgage    Mortgage?
}

// PropertyAddress model
model PropertyAddress {
  id          String   @id @default(uuid())
  city        String?
  country     String?
  postal_code String?
  region      String?
  street      String?
  mortgage    Mortgage?
}

// LoanStatus model
model LoanStatus {
  id          String   @id @default(uuid())
  end_date    DateTime?
  type        String?
  student     Student?
}

// PSLFStatus model
model PSLFStatus {
  id                      String   @id @default(uuid())
  estimated_eligibility_date DateTime?
  payments_made           Int?
  payments_remaining      Int?
  student                 Student?
}

// RepaymentPlan model
model RepaymentPlan {
  id          String   @id @default(uuid())
  description String?
  type        String?
  student     Student?
}

// ServicerAddress model
model ServicerAddress {
  id          String   @id @default(uuid())
  city        String?
  country     String?
  postal_code String?
  region      String?
  street      String?
  student     Student?
}

// Balances model
model Balances {
  id                      String   @id @default(uuid())
  available               Float?
  current                 Float?
  iso_currency_code       String?
  limit                   Float?
  unofficial_currency_code String?
  account                 Account?
}